.\" Automatically generated by Pod::Man version 1.15
.\" Sat Jul 27 10:55:55 2002
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "LM-SOLVE 1"
.TH LM-SOLVE 1 "perl v5.6.1" "2002-07-27" "User Contributed Perl Documentation"
.UC
.SH "NAME"
lm-solve \- A Computerized Solver for Logic Mazes
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBlm-solve\fR [options] \fIInput File\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This program is a front end for the LM-Solve Perl modules that 
can be used to solve any of the number of Logic Mazes present on the 
Logic Mazes site (http://www.logicmazes.com/) and similar sites.
.PP
To use this program you should create a text file describing the layout
of the game and your current position (most probably the initial one). Then
invoke \fBlm-solve\fR with its path as input. Alternatively, by specifiying
\&\fI-\fR as the filename, then \fBlm-solve\fR will read the layout from the standard
input.
.PP
One can find an archive containing some written-down layouts for some of the
puzzles on the web on the LM-Solve homepage. The format of the
layouts for the various puzzle types is described below.
.SH "OPTIONS"
.IX Header "OPTIONS"
.Ip "\fB\*(--help\fR \fB\-h\fR \fB\-?\fR" 8
.IX Item "help -h -?"
Display a help message on the screen.
.Ip "\fB\*(--man\fR" 8
.IX Item "man"
Invoke the \s-1UNIX\s0 \fBman\fR command to display the man-page of this program.
.Ip "\fB\-g\fR \fIvariant\fR | \fB\*(--game\fR \fIvariant\fR" 8
.IX Item "-g variant | game variant"
Specify the \fIvariant\fR to use for the game. Currently available variants are:
.Sp
\&\fBalice\fR \- Alice Mazes
.Sp
\&\fBminotaur\fR \- Theseus and the Minotaur Mazes
.Sp
\&\fBnumbers\fR \- Number Mazes
.Sp
\&\fBtilt_single\fR \- Tilt Mazes with one goal
.Sp
\&\fBtilt_multi\fR \- Tilt Mazes with multiple goals
.Sp
\&\fBtilt_rb\fR \- A Red-Blue Tilt Puzzle
.Ip "\fB\*(--rle\fR \fB\*(--norle\fR" 8
.IX Item "rle norle"
This options toggle run-length encoding of the moves displayed on and off.
What it means is that several identical consecutive moves will be displayed
as "\fBmove\fR * \fBnumber\fR".
.Sp
The default is \fB\*(--rle\fR.
.Ip "\fB\*(--output-states\fR \fB\*(--nooutput-states\fR" 8
.IX Item "output-states nooutput-states"
\&\fB\*(--output-states\fR will precede each line with the state of the game up
to the move displayed on it. The default is \fB\*(--nooutput-states\fR
.Ip "\fB\*(--method\fR \fIscan\fR" 8
.IX Item "method scan"
Specifies the scan to use for solving the game:
.Sp
\&\fBbrfs\fR \- Breadth-First Search. Finds minimal solutions, but possibly
slower than other scans.
.Sp
\&\fBdfs\fR \- Depth-First Search.
.Ip "\fB\*(--rtd\fR \fB\*(--nortd\fR" 8
.IX Item "rtd nortd"
\&\fB\*(--rtd\fR stands for \*(L"Run-Time Display\*(R". This option will print the states 
of the scan that were arrived to, as the scan encounters them. The default is
\&\fB\*(--nortd\fR.
.SH "Generic Board Format"
.IX Header "Generic Board Format"
The format of the board is that of a file containing keys and values on each
line, in the format \*(L"key=value\*(R". A value can be an integer (e.g: \*(L"x=6\*(R"),
an (x,y) integral pair (e.g: \*(L"dims=(3,6)\*(R"), an array of pairs (e.g:
\&\*(L"goals=\*(R"[(5,6), (3,8), (0, 3)]\*(L") or a layout specification. The
latter begins with \*(R"<<\s-1EOF\s0" where \s-1EOF\s0 is a terminator and extends from the
next line down to the first line containing the terminator.
.PP
Whitespace and newlines are generally ignored and the keys are 
case-insensitive.
.SH "Alice Mazes Board Format"
.IX Header "Alice Mazes Board Format"
Dims is an (x,y) value that specifies the dimensions of the board. layout
is the layout of the board. The cells are specified row by row, from top to
bottom and from left to right. Newlines and whitespace between each cell
are ignored as well as lines beginning with a sharp-sign (\*(L"#\*(R").
.PP
Each cell is surrounded by square brackets and contains several flags 
separated by commas. The flags are:
.Ip "N,S,E,W" 8
.IX Item "N,S,E,W"
Specifies North, South, East and West arrows respectively.
.Ip "\s-1NE\s0,NW,SE,SW" 8
.IX Item "NE,NW,SE,SW"
Likewise for North-East, North-West, South-East and South-West
.Ip "\s-1ADD\s0" 8
.IX Item "ADD"
Specifies that this cell increases the step by 1.
.Ip "\s-1SUB\s0" 8
.IX Item "SUB"
Specifies that this cell decreases the step by 1.
.Ip "\s-1GOAL\s0" 8
.IX Item "GOAL"
The goal cell.
.Ip "\s-1START\s0" 8
.IX Item "START"
The start cell.
.Ip "\s-1BLANK\s0" 8
.IX Item "BLANK"
A blank cell that may not be stepped on.
.PP
Examples can be found in the layouts archive.
.SH "Theseus and the Minotaur Mazes Board Format"
.IX Header "Theseus and the Minotaur Mazes Board Format"
The keys and values required for this format are:
.Ip "Dims" 8
.IX Item "Dims"
An (x,y) pair that specifies the (x,y) dimensions of the board.
.Ip "Exit" 8
.IX Item "Exit"
An (x,y) pair that specifies the (x,y) coordinates of the exit. (starting
at (0,0) for the top-left corner.)
.Ip "Thes" 8
.IX Item "Thes"
(x,y) \- The initial coordinates of Theseus.
.Ip "Mino" 8
.IX Item "Mino"
(x,y) \- The initial coordinates of the Minotaur.
.Ip "layout" 8
.IX Item "layout"
This is a layout in the following format: The first line contains width
characters that are either whitespace (\*(L" \*(R") or a \*(L"\-\*(R" or a \*(L"_\*(R" depending
if there is a horizontal wall at that position. The second line contains
width+1 characters that are either whitespace or a \*(L"|\*(R" sign depending
if there is a vertical wall at that position.
.Sp
The horizontal-walls and vertical-wall lines intermingle this way until
the bottom line which specifies horizontal walls.
.PP
Examples can be found in the layouts archive.
.SH "Number Mazes Board Format"
.IX Header "Number Mazes Board Format"
Dims is an (x,y) key that specifies the dimensions of the board. Start
is an (x,y) key that specifies the starting position (starting from (0,0) 
at the top-left corner). The key layout is a layout key that contains 
the layout of the board.
.PP
The layout contains a line for every row, and every cell is represented as
a character. It contains a digit for its number or an asterisk (\*(L"*\*(R") if it 
is the goal cell.
.PP
Examples can be found in the layouts archive.
.SH "Single Goal Tilt Mazes"
.IX Header "Single Goal Tilt Mazes"
Dims is an (x,y) key that speciifes the dimensions of the board. Start
is an (x,y) pair that specifies the coordinates of the start (starting from
0). Goal is an (x,y) pair that determines the location of the single goal.
.PP
layout contains a scheme of horizontal and vertical walls similar to the
Minotaur's mazes.
.SH "Multiple Goals Tilt Mazes"
.IX Header "Multiple Goals Tilt Mazes"
Dims is an (x,y) key that speciifes the dimensions of the board. Start
is an (x,y) pair that specifies the coordinates of the start (starting from
0). Goals is an (x,y) array that determines the locations of the goals.
.PP
layout contains a scheme of horizontal and vertical walls similar to the
Minotaur's mazes.
.SH "Red-Blue Tilt Puzzles"
.IX Header "Red-Blue Tilt Puzzles"
Dims is an (x,y) key that specifies the dimensions of the board. Blue_Start
and Red_Start are two (x,y) keys which specify the starting positiones of 
the red and blue markers. Red_Goal and Blue_Goal are their respective goals.
.PP
layout contains a scheme of horizontal and vertical walls similar to the 
Minotaur's mazes.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBLM-Solve's Homepage\fR: 
.PP
http://vipe.technion.ac.il/~shlomif/lm-solve/
.PP
\&\fBThe Logic Mazes Homepage\fR: 
.PP
http://www.logicmazes.com/
.PP
\&\fBClick Mazes\fR: 
.PP
http://www.gjnem.demon.co.uk/
.SH "AUTHOR"
.IX Header "AUTHOR"
Shlomi Fish <shlomif@vipe.technion.ac.il>
